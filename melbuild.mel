// py2mel.py v1.0.2, compiled 2015-09-01 19:01:24.097532

python("\n\n\nimport maya.mel as mel\nimport maya.cmds as cmds\nfrom re import findall\nimport maya.api.OpenMaya as om\nimport maya.api.OpenMayaUI as omui\nfrom pprint import pprint\nfrom time import time\n\nclass Selector(object):\n    \n    def __init__(s, objects):\n        s.meshes = {}\n        s.allJoints = {} \n        \n        for obj in objects:\n            skin = mel.eval(\"findRelatedSkinCluster %s\" % obj)\n            if skin:\n                joints = cmds.skinPercent(skin, \"%s.vtx[0]\" % obj, q=True, t=None)\n                for vert in range(cmds.getAttr(\"%s.weightList\" % skin, size=True)):\n                    for i, v in enumerate(cmds.skinPercent(skin, \"%s.vtx[%s]\" % (obj, vert), q=True, v=True)):\n                        joint = joints[i]\n                        if 0.2 < v:\n                            \n                            s.allJoints[joint] = s.allJoints.get(joint, [])\n                            s.allJoints[joint].append(\"%s.vtx[%s]\" % (obj, vert))\n                            \n                            s.meshes[obj] = s.meshes.get(obj, {})\n                            s.meshes[obj][joint] = s.meshes[obj].get(joint, {})\n                            s.meshes[obj][joint][vert] = v\n        \n        for j in s.allJoints:\n            cmds.select(s.allJoints[j], r=True)\n            s.allJoints[j] = cmds.filterExpand(ex=False, sm=31)\n        cmds.select(clear=True)\n\n        s.sjob = cmds.scriptJob(e=[\"SelectionChanged\", s.selectionChanged], kws=True)\n        s.tool = \"TempSelectionTool\"\n        s.turnOffColours = False \n        s.lastJoint = \"\" \n\n    \"\"\"\n    Monitor selection changes\n    \"\"\"\n    def selectionChanged(s):\n        print \"selection Changed\"\n        selection = cmds.ls(sl=True)\n        if cmds.currentCtx() != s.tool:\n            if selection and len(selection) == 1:\n                if selection[0] in s.allJoints:\n                    \n                    s.boneSetColour(selection[0], s.meshes, (0.3, 0.8, 0.1))\n                    return\n                elif selection[0] in s.meshes:\n                    \n                    s.switchTool() \n                    s.currentMesh = selection[0]\n                    s.setColour(\"%s.vtx[0:]\" % s.currentMesh, (0.4,0.4,0.4))\n                    cmds.select(clear=True)\n                    cmds.refresh()\n                    return\n            if s.turnOffColours:\n                s.setColour() \n                s.turnOffColours = False\n\n    \"\"\"\n    Set vertex colour on selection\n    \"\"\"\n    def setColour(s, selection=None, colour=None):\n        for mesh in s.meshes:\n            cmds.polyColorPerVertex(\"%s.vtx[0:]\" % mesh, rgb=(0.5,0.5,0.5))\n            if colour:\n                cmds.setAttr(\"%s.displayColors\" % mesh, 1)\n            else:\n                cmds.setAttr(\"%s.displayColors\" % mesh, 0)\n        if selection and colour:\n            cmds.polyColorPerVertex(selection, rgb=colour)\n            s.turnOffColours = True \n\n    \"\"\"\n    Switch to our custom picker tool\n    \"\"\"\n    def switchTool(s):\n        s.lastTool = cmds.currentCtx()\n        if cmds.draggerContext(s.tool, ex=True):\n            cmds.deleteUI(s.tool)\n        cmds.draggerContext(\n            s.tool,\n            name=s.tool,\n            releaseCommand=s.makeSelection,\n            dragCommand=s.updateSelectionPreview,\n            cursor=\"hand\")\n        cmds.setToolTo(s.tool)\n\n\n    \"\"\"\n    Switch back to the last tool used\n    \"\"\"\n    def revertTool(s):\n        cmds.setToolTo(s.lastTool)\n        cmds.refresh()\n\n    \"\"\"\n    Set mesh colour from bone\n    \"\"\"\n    def boneSetColour(s, bone, meshes, colour):\n        if bone in s.allJoints:\n            s.setColour(s.allJoints[bone], colour)\n\n    \"\"\"\n    Pick a point in space on the mesh\n    \"\"\"\n    def makeSelection(s):\n        intersection = s.getPointer(s.meshes, s.tool)\n        if intersection:\n            \n            mesh, faceID = intersection\n            bone = s.pickSkeleton(mesh, faceID)\n            if bone:\n                cmds.select(bone, r=True)\n        else:\n            print \"Nothing to select.\"\n        s.revertTool()\n\n    \"\"\"\n    Update display\n    \"\"\"\n    def updateSelectionPreview(s):\n        intersection = s.getPointer(s.meshes, s.tool)\n        if intersection:\n            \n            mesh, faceID = intersection\n            bone = s.pickSkeleton(mesh, faceID)\n            if bone:\n                if bone == s.lastJoint:\n                    pass \n                else:\n                    t = time()\n                    s.lastJoint = bone\n                    s.boneSetColour(bone, s.meshes, (9, 0.7, 0.3))\n                    cmds.refresh()\n\n    \"\"\"\n    Get Mouse in 3D\n    \"\"\"\n    def getPointer(s, meshes, tool):\n        try:\n            \n            viewX, viewY, viewZ = cmds.draggerContext(tool, q=True, dp=True)\n            \n            position = om.MPoint()\n            direction = om.MVector()\n            \n            omui.M3dView().active3dView().viewToWorld(int(viewX), int(viewY), position, direction)\n            \n            for mesh in meshes:\n                selection = om.MSelectionList()\n                selection.add(mesh)\n                dagPath = selection.getDagPath(0)\n                fnMesh = om.MFnMesh(dagPath)\n                \n                intersection = fnMesh.closestIntersection(om.MFloatPoint(position), om.MFloatVector(direction), om.MSpace.kWorld, 99999, False)\n                \n                if intersection and intersection[3] != -1:\n                    return (mesh, intersection[2]) \n        except RuntimeError:\n            print \"Could not find point.\"\n\n\n    \"\"\"\n    Pick a bone from a point in space\n    \"\"\"\n    def pickSkeleton(s, mesh, faceID):\n        \n        meshes = s.meshes\n        verts = [int(v) for v in findall(r\"\\s(\\d+)\\s\", cmds.polyInfo(\"%s.f[%s]\" % (mesh, faceID), fv=True)[0])]\n\n        weights = {}\n        for joint in meshes[mesh]:\n            weights[joint] = weights.get(joint, 0) \n            weights[joint] = sum([meshes[mesh][joint][v] for v in verts if v in meshes[mesh][joint]])\n\n        if weights:\n            maxWeight = max(weights, key=lambda x: weights.get(x))\n            return maxWeight\n\nsel = cmds.ls(sl=True)\nsel = cmds.listRelatives(cmds.ls(\"Mesh\", r=True), s=False)\nif sel:\n    go = Selector(sel)\n");