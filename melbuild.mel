// py2mel.py v1.0.2, compiled 2015-09-01 06:15:22.305559

python("\n\n\nimport maya.mel as mel\nimport maya.cmds as cmds\nfrom re import findall\nimport maya.api.OpenMaya as om\nimport maya.api.OpenMayaUI as omui\n\nclass Selector(object):\n    \n    def __init__(s, obj):\n        s.mesh = obj\n        s.cache = {}\n        s.sjob = cmds.scriptJob(e=[\"SelectionChanged\", s.selectionChanged], kws=True)\n        s.tool = \"TempSelectionTool\"\n        s.clearMeshes = False \n\n    \"\"\"\n    Monitor selection changes\n    \"\"\"\n    def selectionChanged(s):\n        print \"selection Changed\"\n        selection = cmds.ls(sl=True)\n        if cmds.currentCtx() != s.tool:\n            if selection and len(selection) == 1 and selection[0] == s.mesh:\n                s.switchTool()\n                s.mesh = selection[0]\n                cmds.select(clear=True)\n                s.setColour(s.mesh, (0.4,0.4,0.4))\n                s.clearMeshes = True\n            elif selection and cmds.ls(sl=True, st=True)[1] == \"joint\":\n                print \"No need to clear\"\n            else:\n                if s.clearMeshes:\n                    s.setColour(s.mesh)\n                    s.clearMeshes = False\n                    \n                    s.cache = {}\n\n    \"\"\"\n    Set vertex colour on selection\n    \"\"\"\n    def setColour(s, mesh, colour=None):\n        selection = cmds.ls(sl=True)\n        cmds.select(mesh, r=True)\n        cmds.polyColorPerVertex(rgb=(0.5,0.5,0.5))\n        cmds.select(selection, r=True)\n        if colour:\n            cmds.setAttr(\"%s.displayColors\" % mesh, 1)\n            cmds.polyColorPerVertex(rgb=colour)\n        else:\n            cmds.setAttr(\"%s.displayColors\" % mesh, 0)\n\n    \"\"\"\n    Switch to our custom picker tool\n    \"\"\"\n    def switchTool(s):\n        s.lastTool = cmds.currentCtx()\n        if cmds.draggerContext(s.tool, ex=True):\n            cmds.deleteUI(s.tool)\n        cmds.draggerContext(\n            s.tool,\n            name=s.tool,\n            releaseCommand=s.makeSelection,\n            dragCommand=s.updateSelectionPreview,\n            cursor=\"hand\")\n        cmds.setToolTo(s.tool)\n\n\n    \"\"\"\n    Switch back to the last tool used\n    \"\"\"\n    def revertTool(s):\n        cmds.setToolTo(s.lastTool)\n        cmds.refresh()\n\n    \"\"\"\n    Pick a point in space on the mesh\n    \"\"\"\n    def makeSelection(s):\n        if s.mesh:\n            intersection = s.getPointer(s.mesh, s.tool)\n            if intersection:\n                \n                bone, verts = s.pickSkeleton(intersection)\n                if bone:\n                    cmds.select([\"%s.vtx[%s]\" % (s.mesh, v) for v in verts.keys()], r=True)\n                    s.setColour(s.mesh, (0.3, 0.8, 0.1))\n                    cmds.select(bone, r=True)\n                    s.clearMeshes = True\n            else:\n                print \"Nothing to select.\"\n        s.revertTool()\n\n    \"\"\"\n    Update display\n    \"\"\"\n    def updateSelectionPreview(s):\n        if s.mesh:\n            intersection = s.getPointer(s.mesh, s.tool)\n            if intersection:\n                \n                bone, verts = s.pickSkeleton(intersection)\n                s.cache[\"lastJoint\"] = s.cache.get(\"lastJoint\", \"\")\n                if bone:\n                    if s.cache[\"lastJoint\"] and s.cache[\"lastJoint\"] == bone:\n                        pass\n                    else:\n                        s.cache[\"lastJoint\"] = bone\n                        cmds.select([\"%s.vtx[%s]\" % (s.mesh, v) for v in verts.keys()], r=True)\n                        s.setColour(s.mesh, (9, 0.7, 0.3))\n                        cmds.select(s.mesh, r=True)\n                        s.clearMeshes = True\n            cmds.refresh()\n\n    \"\"\"\n    Get Mouse in 3D\n    \"\"\"\n    def getPointer(s, mesh, tool):\n        try:\n            \n            viewX, viewY, viewZ = cmds.draggerContext(tool, q=True, dp=True)\n            \n            position = om.MPoint()\n            direction = om.MVector()\n            \n            omui.M3dView().active3dView().viewToWorld(int(viewX), int(viewY), position, direction)\n            selection = om.MSelectionList()\n            selection.add(mesh)\n            dagPath = selection.getDagPath(0)\n            fnMesh = om.MFnMesh(dagPath)\n            \n            intersection = fnMesh.closestIntersection(om.MFloatPoint(position), om.MFloatVector(direction), om.MSpace.kWorld, 99999, False)\n            return intersection\n        except RuntimeError:\n            print \"Could not find point.\"\n\n\n    \"\"\"\n    Pick a bone from a point in space\n    \"\"\"\n    def pickSkeleton(s, intersection):\n        hitPoint, hitRayParam, hitFace, hitTriangle, hitBary1, hitBary2 = intersection\n        if hitTriangle != -1:\n            \n            skin = mel.eval(\"findRelatedSkinCluster %s\" % s.mesh)\n            if skin:\n                \n                cmds.select(\"%s.f[%s]\" % (s.mesh, hitFace), r=True)\n                verts = [int(v) for v in findall(r\"\\s(\\d+)\\s\", cmds.polyInfo(fv=True)[0])]\n                joints = cmds.skinPercent(skin, \"%s.vtx[0]\" % s.mesh, q=True, t=None)\n                s.cache[\"weightCache\"] = s.cache.get(\"weightCache\", {})\n                try: \n                    weights = s.cache[\"weightCache\"][s.mesh]\n                except KeyError:\n                    weights = {}\n                    for vert in range(cmds.getAttr(\"%s.weightList\" % skin, size=True)):\n                        for i, v in enumerate(cmds.skinPercent(skin, \"%s.vtx[%s]\" % (s.mesh, vert), q=True, v=True)):\n                            joint = joints[i]\n                            if 0.2 < v:\n                                weights[joint] = weights.get(joint, {})\n                                weights[joint][vert] = v\n                    s.cache[\"weightCache\"][s.mesh] = weights\n\n                selWeights = {}\n                for joint in weights:\n                    for vert in verts:\n                        if vert in weights[joint]:\n                            selWeights[joint] = selWeights.get(joint, 0)\n                            selWeights[joint] += weights[joint][vert]\n                maxWeight = max(selWeights, key=lambda x: selWeights.get(x))\n                return maxWeight, weights[maxWeight]\n            else:\n                print \"No skin found.\"\n        return None, None\n\n\nsel = cmds.ls(\"body_mesh\", r=True)\nif sel:\n    go = Selector(sel[0])\n");