# Begin
# Find joints tool

import maya.mel as mel
import maya.cmds as cmds
from re import findall
import maya.api.OpenMaya as om
import maya.api.OpenMayaUI as omui
from pprint import pprint
from time import time


class Selection(object):
    def __init__(s, win):
        s.ignore = False
        s.call = []
        s.selection = []
        cmds.scriptJob(e=["SelectionChanged", s.run], p=win)
    def run(s):
        if not s.ignore:
            s.selection = cmds.ls(sl=True)
            if s.call:
                for c in s.call:
                    c(s.selection)
    def __enter__(s):
        s.ignore = True
        return s
    def __exit__(s, *err):
        s.ignore = False


class Window(object):
    def __init__(s):
        winName = "BETAWIN"
        if cmds.window(winName, ex=True):
            cmds.deleteUI(winName)
        win = cmds.window(winName, rtf=True, t="(BETA TEST) Controllerless Rigging")
        cmds.columnLayout(adj=True)
        cmds.text(h=30, l="Controllerless Rig active on the following objects:")
        s.wrapper = cmds.scrollLayout(cr=True, bgc=[0.2,0.2,0.2], h=100)
        cmds.text(l="Nothing here...")
        cmds.setParent("..")
        cmds.button(h=40, l="Click to use selected objects (skinned meshes).", c=lambda x: s.addMesh())
        cmds.showWindow(win)
        s.select = Selection(win)
        s.select.call.append(s.selectUpdate)
        s.picker = Picker(s.select)
    def addMesh(s):
        s.selection = cmds.ls(sl=True, type="transform")
        cmds.deleteUI(cmds.layout(s.wrapper, q=True, ca=True))
        if s.selection:
            s.picker.cache(s.selection)
            for o in sel:
                cmds.text(l=o, p=s.wrapper)
        else:
            s.picker.cache()
            cmds.text(l="Nothing here...", p=s.wrapper)
    def selectUpdate(s, sel):
        if sel and sel[0] in s.selection:
            s.picker.switchTool()


class Picker(object):
    """
    Controllerless Picker
    """
    def __init__(s, select):
        s.meshes = {} # Meshes to look for
        s.joints = {} # Joints associated with em
        s.select = select # Selection interface (TEMPORARY)
        s.tool = "ControllerlessSelection" # Tool name
        s.lastTool = "" # Previous tool
        # s.lastJoint = "" # Previous joint, only display joint during drag on changes

    def cache(s, meshes=None):
        """
        Store joints influence on objects for quick checking later
        """
        if meshes:
            # Cache Joints and Meshes
            for mesh in meshes:
                skin = mel.eval("findRelatedSkinCluster %s" % mesh)
                if skin:
                    joints = cmds.skinPercent(skin, "%s.vtx[0]" % mesh, q=True, t=None)
                    for vert in range(cmds.getAttr("%s.weightList" % skin, size=True)):
                        for i, v in enumerate(cmds.skinPercent(skin, "%s.vtx[%s]" % (mesh, vert), q=True, v=True)):
                            joint = joints[i]
                            if 0.2 < v:
                                # Sort by joints
                                s.joints[joint] = s.joints.get(joint, [])
                                s.joints[joint].append("%s.vtx[%s]" % (mesh, vert))
                                # Sort by meshes
                                s.meshes[mesh] = s.meshes.get(mesh, {})
                                s.meshes[mesh][joint] = s.meshes[mesh].get(joint, {})
                                s.meshes[mesh][joint][vert] = v
            # Speed up Cache
            if s.joints:
                for j in s.joints:
                    cmds.select(s.joints[j], r=True)
                    s.joints[j] = cmds.filterExpand(ex=False, sm=31)
                cmds.select(clear=True)
        else:
            s.meshes = {}
            s.joints = {}
        pass

    def switchTool(s):
        """
        Switch to our selection tool
        """
        s.lastTool = cmds.currentCtx()
        # For testing, refresh the tool each time this is run!
        if cmds.draggerContext(s.tool, ex=True):
            cmds.deleteUI(s.tool)
        cmds.draggerContext(
            s.tool,
            name=s.tool,
            releaseCommand=s.makeSelection,
            dragCommand=s.updateSelectionPreview,
            cursor="hand",
            image1="hands.png")
        cmds.setToolTo(s.tool)

    def setColour(s, selection=None, colour=None):
        """
        Colour the mesh for visual feedback.
        This step slows down the process a bit.
        """
        for mesh in s.meshes:
            cmds.polyColorPerVertex("%s.vtx[0:]" % mesh, rgb=(0.5,0.5,0.5))
            if colour:
                cmds.setAttr("%s.displayColors" % mesh, 1)
            else:
                cmds.setAttr("%s.displayColors" % mesh, 0)
        if selection and colour:
            cmds.polyColorPerVertex(selection, rgb=colour)
            s.turnOffColours = True # There is colour to be turned off

    def monitorSelection(s, sel):
        """
        Switch to our tool if selecting a mesh in our mesh list.
        De-colour things if our tool is selected and selection leaves our meshes.
        """
        if cmds.currentCtx() != s.tool:
            if sel and sel[0] in s.meshes:
                pass
                # Switch to our picker tool
            else:
                pass
                # Turn off our colours


            # if cmds.currentCtx() != s.tool:
            #     if selection and len(selection) == 1:
            #         if selection[0] in s.meshes:
            #             # Initialize our setup
            #             s.switchTool() # switch to our picker tool
            #             s.currentMesh = selection[0]
            #             s.setColour("%s.vtx[0:]" % s.currentMesh, (0.4,0.4,0.4))
            #             s.expectedChange = True
            #             cmds.select(clear=True)
            #             cmds.refresh()
            #             return
            #     if s.turnOffColours:
            #         s.setColour() # Turn off all colours
            #         s.turnOffColours = False














Window()






class Selector(object):
    """
    Set it all up
    """
    def __init__(s, objects):
        s.meshes = {}
        s.allJoints = {} # Shortcut to all joints
        s.expectedChange = False # Prevent normal selection triggers when expecting a change
        # Build our rigs information
        for obj in objects:
            skin = mel.eval("findRelatedSkinCluster %s" % obj)
            if skin:
                joints = cmds.skinPercent(skin, "%s.vtx[0]" % obj, q=True, t=None)
                for vert in range(cmds.getAttr("%s.weightList" % skin, size=True)):
                    for i, v in enumerate(cmds.skinPercent(skin, "%s.vtx[%s]" % (obj, vert), q=True, v=True)):
                        joint = joints[i]
                        if 0.2 < v:
                            # Sort by joints
                            s.allJoints[joint] = s.allJoints.get(joint, [])
                            s.allJoints[joint].append("%s.vtx[%s]" % (obj, vert))
                            # Sort by meshes
                            s.meshes[obj] = s.meshes.get(obj, {})
                            s.meshes[obj][joint] = s.meshes[obj].get(joint, {})
                            s.meshes[obj][joint][vert] = v
        # Reduce vert call
        for j in s.allJoints:
            cmds.select(s.allJoints[j], r=True)
            s.allJoints[j] = cmds.filterExpand(ex=False, sm=31)
        cmds.select(clear=True)

        s.sjob = cmds.scriptJob(e=["SelectionChanged", s.selectionChanged], p=win)#,    ro=True)
        s.tool = "TempSelectionTool"
        s.turnOffColours = False # Don't turn off colours on each selection change. Only when done
        s.lastJoint = "" # Previous joint, only display joint during drag on changes

    """
    Monitor selection changes
    """
    def selectionChanged(s):
        if s.expectedChange: # If we were anticipating a selection change, ignore
            s.expectedChange = False
        else:
            print "selection Changed"
            selection = cmds.ls(sl=True)
            if cmds.currentCtx() != s.tool:
                if selection and len(selection) == 1:
                    if selection[0] in s.meshes:
                        # Initialize our setup
                        s.switchTool() # switch to our picker tool
                        s.currentMesh = selection[0]
                        s.setColour("%s.vtx[0:]" % s.currentMesh, (0.4,0.4,0.4))
                        s.expectedChange = True
                        cmds.select(clear=True)
                        cmds.refresh()
                        return
                if s.turnOffColours:
                    s.setColour() # Turn off all colours
                    s.turnOffColours = False

    """
    Set vertex colour on selection
    """
    def setColour(s, selection=None, colour=None):
        for mesh in s.meshes:
            cmds.polyColorPerVertex("%s.vtx[0:]" % mesh, rgb=(0.5,0.5,0.5))
            if colour:
                cmds.setAttr("%s.displayColors" % mesh, 1)
            else:
                cmds.setAttr("%s.displayColors" % mesh, 0)
        if selection and colour:
            cmds.polyColorPerVertex(selection, rgb=colour)
            s.turnOffColours = True # There is colour to be turned off

    """
    Switch to our custom picker tool
    """
    def switchTool(s):
        s.lastTool = cmds.currentCtx()
        if cmds.draggerContext(s.tool, ex=True):
            cmds.deleteUI(s.tool)
        cmds.draggerContext(
            s.tool,
            name=s.tool,
            releaseCommand=s.makeSelection,
            dragCommand=s.updateSelectionPreview,
            cursor="hand",
            image1="hands.png")
        cmds.setToolTo(s.tool)


    """
    Switch back to the last tool used
    """
    def revertTool(s):
        cmds.setToolTo(s.lastTool)
        cmds.refresh()

    """
    Set mesh colour from bone
    """
    def boneSetColour(s, bone, meshes, colour):
        if bone in s.allJoints:
            s.setColour(s.allJoints[bone], colour)

    """
    Pick a point in space on the mesh
    """
    def makeSelection(s):
        intersection = s.getPointer(s.meshes, s.tool)
        if intersection:
            # Pick nearest bone with influence
            mesh, faceID = intersection
            bone = s.pickSkeleton(mesh, faceID)
            if bone:
                if cmds.attributeQuery("control", n=bone, ex=True):
                    controller = cmds.getAttr("%s.control" % bone)
                else:
                    controller = bone
                s.expectedChange = True
                cmds.select(controller, r=True)
                s.boneSetColour(bone, s.meshes, (0.3, 0.8, 0.1))
        else:
            print "Nothing to select."
        s.revertTool()

    """
    Update display
    """
    def updateSelectionPreview(s):
        intersection = s.getPointer(s.meshes, s.tool)
        if intersection:
            # Pick nearest bone with influence
            mesh, faceID = intersection
            bone = s.pickSkeleton(mesh, faceID)
            if bone:
                if bone == s.lastJoint:
                    pass # No need to do anything
                else:
                    t = time()
                    s.lastJoint = bone
                    s.boneSetColour(bone, s.meshes, (9, 0.7, 0.3))
                    cmds.refresh()

    """
    Get Mouse in 3D
    """
    def getPointer(s, meshes, tool):
        try:
            # Grab screen co-ords
            viewX, viewY, viewZ = cmds.draggerContext(tool, q=True, dp=True)
            # Set up empty vectors
            position = om.MPoint()
            direction = om.MVector()
            # Convert 2D positions into 3D positions
            omui.M3dView().active3dView().viewToWorld(int(viewX), int(viewY), position, direction)
            # Check our meshes
            for mesh in meshes:
                selection = om.MSelectionList()
                selection.add(mesh)
                dagPath = selection.getDagPath(0)
                fnMesh = om.MFnMesh(dagPath)
                # Shoot a ray and check for intersection
                intersection = fnMesh.closestIntersection(om.MFloatPoint(position), om.MFloatVector(direction), om.MSpace.kWorld, 99999, False)
                # hitPoint, hitRayParam, hitFace, hitTriangle, hitBary1, hitBary2 = intersection
                if intersection and intersection[3] != -1:
                    return (mesh, intersection[2]) # hit mesh and face ID
        except RuntimeError:
            print "Could not find point."


    """
    Pick a bone from a point in space
    """
    def pickSkeleton(s, mesh, faceID):
        # Get verts from Face
        meshes = s.meshes
        verts = [int(v) for v in findall(r"\s(\d+)\s", cmds.polyInfo("%s.f[%s]" % (mesh, faceID), fv=True)[0])]

        weights = {}
        for joint in meshes[mesh]:
            weights[joint] = weights.get(joint, 0) # Initialize
            weights[joint] = sum([meshes[mesh][joint][v] for v in verts if v in meshes[mesh][joint]])

        if weights:
            maxWeight = max(weights, key=lambda x: weights.get(x))
            return maxWeight

# sel = cmds.ls(sl=True)
# # sel = cmds.listRelatives(cmds.ls("Mesh", r=True), s=False)
# if sel:
#     go = Selector(sel)
#     print go.meshes
